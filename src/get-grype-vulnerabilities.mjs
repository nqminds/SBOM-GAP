import { fileURLToPath } from "url";
import { dirname } from "path";
import path from "node:path";
import fs from "fs";

/**
 * Parses the text vulerability report generated by grype
 *
 *@example
 *getVulnerabilities('../vulnerability-reports/reports/vulnerability_report_nodeproject');
 *
 *@param {string} vulReport - Path to grype vulnerability report file or text data
 *@returns {object[]} - Returns an Array of objects
 */
export async function getVulnerabilities(vulReport) {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);

  let data;
  const resolvedPath = path.resolve(process.cwd(), vulReport);

  try {
    // check if the path exists.
    if (fs.existsSync(resolvedPath)) {
      data = fs.readFileSync(resolvedPath, "utf-8");
      // check relative path to __dirname
    } else if (fs.existsSync(path.resolve(__dirname, vulReport))) {
      data = fs.readFileSync(path.resolve(__dirname, vulReport), "utf-8");
    } else {
      data = vulReport;
    }
  } catch (error) {
    throw new Error(`The file path provided is invalid: ${error}`);
  }

  const lines = data.split("\n").slice(1);
  const vulnerabilities = lines
    .map((line) => {
      // match numbers and hyphens
      const name = line.match(/^([\w-]+)/);
      if (!name) return null;
      let versions;
      if (/\S+\s+\S+\s+/.test(line.slice(name[0].length))) {
        versions = line
          .slice(name[0].length)
          .match(/\s*((\d+\.)*\d+)\s*((\d+\.)*\d+)?\s+/);
      } else {
        versions = line.slice(name[0].length).match(/\s*((\d+\.)*\d+)?\s+/);
      }

      // all known package managers that work with syft
      const type = line.match(
        /(alpm|apk|bin|pod|conan|dart|csproj|vbproj|fsproj|dpkg|mix|rebar|go|gobin|native-image|cabal|jar|war|ear|gradle|pom\.xml|npm|yarn|kernel|nix|composer|portage|pypi|pip|rpm|rpmfile|gem|cargo|sbom|swift)/,
      );
      const vulnerability = line.match(/(CVE-\d+-\d+|GHSA-[a-z0-9-]+)/); // CVE and GHSA formats, add more as discovered
      const severity = line.match(/(Low|Medium|High|Critical)\s*$/);

      return {
        name: name ? name[1] : "",
        installed: versions && versions[1] ? versions[1] : "",
        fixedIn: versions && versions[2] ? versions[3] : "",
        type: type ? type[1] : "",
        vulnerability: vulnerability ? vulnerability[1] : "",
        severity: severity ? severity[1] : "",
      };
    })
    .filter(Boolean) // filter out any null or undefined values
    .map((vul) => ({
      name: vul.name || "",
      installed: vul.installed || "",
      fixedIn: vul.fixedIn || "",
      type: vul.type || "",
      vulnerability: vul.vulnerability || "",
      severity: vul.severity || "",
    }));

  return vulnerabilities;
}
